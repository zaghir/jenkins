// what varibles are available  from jenkins  
//    http://localhost:8080/env-vars.html
// variables
CODE_CHANGE = getGitChanges()
pipline {
    agent any
    environment{
        // define a new varibale 
        NEW_VERSION = "1.2.0"
        // credentials('my-server-credentials')   binds credentials to your env variable
        // for that you need " Credentials Binding " Plugin
        SERVER_CREDENTIALS = credentials('my-server-credentials')
    }
    // build tools for your projects 
    tools{
        maven 'Maven'
        // gradle
        // jdk 
    }
    // Parameterize your Build 
    parameters {
        string(name: 'VERSION', defaultValue: '', description: 'version to deploy on prod' )
        choice(name: 'VERSION', choices: ['1.1.0' , '1.2.0', '1.3.0'], description: '' )
        // skip certain test for example
        booleanParam(name: 'executeTests', defaultValue :'true', description: '' )
    }
    stages {
        stage("build"){
             when {
                expression {
                    BRANCH_NAME ="dev" && CODE_CHANGE == true
                }
            }
            steps {
                echo "build the application..."
                echo "building version ${NEW_VERSION}"
                // use credentials 
                echo " Building with credentials ${SERVER_CREDENTIALS}"
                sh "${SERVER_CREDENTIALS}"
                sh "mvn clean install"
                echo "Running ${env.BUILD_ID} on ${env.JENKINS_URL}"
            }
        }
        stage("test"){
            // execute this step with condition 
            when {
                expression {
                    return  parmas.executeTests && (BRANCH_NAME ="dev" || env.BRANCH_NAME = "master")
                }
            }
            steps {
                echo "test the application..."
                
            }
        }        
        stage("deploy"){
            steps {
                echo "deplying the application..."
                echo "deploying version ${params.VERSION} "
                // we can directly define credentials  like this 
                withCredentials([
                    usernamePassword(credentials : 'my-server-credentials' , usernameVariable : USER , passwordVariable : PWD )
                ]){
                    sh "some script ${USER} ${PWD}"
                }
            }
        }
        // condition == build status  or  build status changes
        post {
            always {
            // this script will be executed , if build is succeed , failure or whatever 
            // send email to the team for the build condition 
            echo " send email to the team for exemple "
            }
            success {
                // if the build is success
                echo " job is successed "
            }
            failure {
                // if the build is success
                // mail to: team@example.com, subject: 'The Pipeline failed :('
                echo " job is failed "
            }
        }

    }
}

// credentials binding pluging 
// https://support.cloudbees.com/hc/en-us/articles/203802500-Injecting-Secrets-into-Jenkins-Build-Jobs#:~:text=Credentials%20plugin%20%2D%20provides%20a%20centralized,inject%20credentials%20as%20environment%20variables.
// https://www.jenkins.io/doc/book/pipeline/jenkinsfile/
